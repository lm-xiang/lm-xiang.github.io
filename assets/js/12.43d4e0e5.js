(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{496:function(a,t,s){"use strict";s.r(t);var e=s(4),v=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("概念:"),s("em",[s("strong",[a._v("将一种数据类型转换为另一种数据类型")])])]),a._v(" "),s("p",[a._v("通常有三种形式的类型转换:")]),a._v(" "),s("ul",[s("li",[a._v("转换为字符串类型")]),a._v(" "),s("li",[a._v("转换为数值类型")]),a._v(" "),s("li",[a._v("转换为布尔型")])]),a._v(" "),s("p",[a._v("转换为 null 和 undefined 没有意义。")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"typeof-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeof-运算符"}},[a._v("#")]),a._v(" typeof 运算符")]),a._v(" "),s("hr"),a._v(" "),s("p",[s("em",[s("strong",[a._v("获取变量的数据类型")])])]),a._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("typeof")]),a._v(" a\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("typeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("blockquote",[s("p",[a._v("typeof运算符返回结果的类型式string")])]),a._v(" "),s("h2",{attrs:{id:"变量类型转换的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量类型转换的分类"}},[a._v("#")]),a._v(" 变量类型转换的分类")]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"显式类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显式类型转换"}},[a._v("#")]),a._v(" 显式类型转换")]),a._v(" "),s("ul",[s("li",[a._v("toString()")]),a._v(" "),s("li",[a._v("String()")]),a._v(" "),s("li",[a._v("Number()")]),a._v(" "),s("li",[a._v("parseInt(String)")]),a._v(" "),s("li",[a._v("parseFloat(String)")]),a._v(" "),s("li",[a._v("Boolean()")])]),a._v(" "),s("h3",{attrs:{id:"隐式类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[a._v("#")]),a._v(" 隐式类型转换")]),a._v(" "),s("ul",[s("li",[a._v("isNaN()")]),a._v(" "),s("li",[a._v("自增/自减运算符 "),s("code",[a._v("++")]),a._v(" "),s("code",[a._v("--")])]),a._v(" "),s("li",[a._v("正号/负号 "),s("code",[a._v("+a")]),a._v(" "),s("code",[a._v("-a")])]),a._v(" "),s("li",[a._v("加号 "),s("code",[a._v("+")])]),a._v(" "),s("li",[a._v("运算符 "),s("code",[a._v("-")]),a._v(" "),s("code",[a._v("*")]),a._v(" "),s("code",[a._v("/")])])]),a._v(" "),s("h3",{attrs:{id:"特殊隐式类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊隐式类型转换"}},[a._v("#")]),a._v(" 特殊隐式类型转换")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("逻辑运算符： "),s("code",[a._v("&&")]),a._v(" "),s("code",[a._v("||")]),a._v(" "),s("code",[a._v("!")]),a._v(" 非布尔值进行"),s("code",[a._v("与或")]),a._v("运算时，会先将其转换为布尔值，然后运算，但是运算结果时原值。")])]),a._v(" "),s("li",[s("p",[a._v("关系运算符： "),s("code",[a._v("<")]),a._v(" "),s("code",[a._v(">")]),a._v(" "),s("code",[a._v("<=")]),a._v(" "),s("code",[a._v(">=")]),a._v(" 等。关系运算符得到的运算结果都是布尔值")])])]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"其他简单类型-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他简单类型-string"}},[a._v("#")]),a._v(" 其他简单类型 -> String")]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"字符串拼接-隐式类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串拼接-隐式类型转换"}},[a._v("#")]),a._v(" 字符串拼接 "),s("code",[a._v("隐式类型转换")])]),a._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("blockquote",[s("p",[a._v("内部调用String()函数，a = a+'' 等价于 a = String(a)")])]),a._v(" "),s("h3",{attrs:{id:"tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[a._v("#")]),a._v(" toString()")]),a._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("blockquote",[s("p",[s("code",[a._v("toString不会影响到原有变量，它会将转换结果返回")])])]),a._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[a._v("补充")]),a._v(" "),s("p",[a._v("null 和 undefined 这两个值没有 toString()方法")]),a._v(" "),s("p",[a._v("Number类型调用toString时，可以再方法中传递一个整数作为参数。toString会把数字转换为指定进制，不指定默认转换为10进制")])]),a._v(" "),s("h3",{attrs:{id:"string-强制转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-强制转换"}},[a._v("#")]),a._v(" String() "),s("code",[a._v("强制转换")])]),a._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("blockquote",[s("ul",[s("li",[a._v("对于 Number 和 Boolean 而言，本质就是调用toString()方法。")]),a._v(" "),s("li",[a._v('对于 null 和 undefined，则不会调用toString()方法。null 直接转换为 "null" , undefined 直接转换为 "undefined"')])])]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"其他数据类型-number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他数据类型-number"}},[a._v("#")]),a._v(" 其他数据类型 -> Number")]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[a._v("#")]),a._v(" Number()")]),a._v(" "),s("p",[a._v("使用Number函数分为三种情况:")]),a._v(" "),s("ul",[s("li",[a._v("字符串 -> 数字\n"),s("ul",[s("li",[a._v("如果字符串中是纯数字，直接转换为数字")]),a._v(" "),s("li",[a._v("如果字符串中包含了非数字(小数点不包括),则在转换为NaN")]),a._v(" "),s("li",[a._v("如果字符串是一个空字符串或者全是空格，则转换为0")])])]),a._v(" "),s("li",[a._v("布尔 -> 数字\n"),s("ul",[s("li",[a._v("true -> 1")]),a._v(" "),s("li",[a._v("false -> 0")])])]),a._v(" "),s("li",[a._v("null -> 数字\n"),s("ul",[s("li",[a._v("0")])])]),a._v(" "),s("li",[a._v("undefined -> 数字\n"),s("ul",[s("li",[a._v("NaN "),s("code",[a._v("使用Number函数，如果无法转换为数字，则会转换为NaN")])])])])]),a._v(" "),s("h3",{attrs:{id:"parseint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parseint"}},[a._v("#")]),a._v(" parseInt()")]),a._v(" "),s("p",[s("code",[a._v("parseInt的作用是将字符串中的有效数字转换为数字")])]),a._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("blockquote",[s("ul",[s("li",[a._v("如果字符串为数字字符串结合，"),s("code",[a._v("只保留字符串最开头的数字")]),a._v("，中文后面部分全部消失")]),a._v(" "),s("li",[s("code",[a._v("如果对非String使用，会先转为String再进行操作")])]),a._v(" "),s("li",[a._v("四舍五入")]),a._v(" "),s("li",[a._v("如果字符串不是数字开头，则直接转换为NaN")]),a._v(" "),s("li",[a._v("如果字符串是一个空串或者空格，转换时会报错")]),a._v(" "),s("li",[a._v("如果有两个参数，后面参数表示将需要转换的变量作为x进制转换为十进制")])])]),a._v(" "),s("blockquote",[s("p",[a._v("boolean，null，undefined 使用parseInt函数都会得到NaN")])]),a._v(" "),s("h3",{attrs:{id:"parsefloat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parsefloat"}},[a._v("#")]),a._v(" parseFloat()")]),a._v(" "),s("p",[a._v("将字符串转换为浮点数")]),a._v(" "),s("blockquote",[s("p",[a._v("内容可参考"),s("code",[a._v("parseInt()")]),a._v(",不同的是 parseFloat 可以获得有效的小数部分。")])]),a._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[a._v("补充")]),a._v(" "),s("ul",[s("li",[a._v("16 进制的数字，以"),s("code",[a._v("0x")]),a._v("开头")]),a._v(" "),s("li",[a._v("8 进制的数字，以"),s("code",[a._v("0")]),a._v("开头")]),a._v(" "),s("li",[a._v("2 进制的数字，"),s("code",[a._v("0b")]),a._v("开头（不是所有的浏览器都支持：chrome 和火狐支持，IE 不支持）")])])]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"转换为boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换为boolean"}},[a._v("#")]),a._v(" 转换为Boolean")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("其他的数据类型都可以转换为 Boolean类型。情况如下：")]),a._v(" "),s("ul",[s("li",[a._v("数字 -> 布尔")])]),a._v(" "),s("blockquote",[s("p",[a._v("除了0，NaN，其他都是true")])]),a._v(" "),s("ul",[s("li",[a._v("字符串 -> 布尔")])]),a._v(" "),s("blockquote",[s("p",[a._v("除了空串，返回都是true。空格字符串也返回true")])]),a._v(" "),s("ul",[s("li",[a._v("null/undefined 都会转换为 false")]),a._v(" "),s("li",[a._v("引用数据类型会转换为 true，"),s("code",[a._v("[]")]),a._v(" "),s("code",[a._v("{}")]),a._v(" 也会转换为true")])]),a._v(" "),s("h3",{attrs:{id:"隐式转换为boolean类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换为boolean类型"}},[a._v("#")]),a._v(" 隐式转换为Boolean类型")]),a._v(" "),s("p",[a._v("当非 Boolean 类型的数值和 Boolean类型的数值做比较时，会先把前者进行隐式转换为 Boolean类型，然后再做比较。举例如下：")]),a._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 打印结果：true")]),a._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 打印结果：false")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h3",{attrs:{id:"显式转换为boolean类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显式转换为boolean类型"}},[a._v("#")]),a._v(" 显式转换为Boolean类型")]),a._v(" "),s("ul",[s("li",[a._v("使用"),s("code",[a._v("!!")]),a._v("可以显式转换Boolean类型。")]),a._v(" "),s("li",[a._v("使用Boolean()函数")])]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"隐式转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换"}},[a._v("#")]),a._v(" 隐式转换")]),a._v(" "),s("hr"),a._v(" "),s("blockquote",[s("p",[a._v("隐式类型转换，内部调用的都是显式类型的方法")])]),a._v(" "),s("h3",{attrs:{id:"isnan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isnan"}},[a._v("#")]),a._v(" isNaN()")]),a._v(" "),s("p",[a._v("判断指定参数是否为NaN,返回结果为Boolean类型。")]),a._v(" "),s("p",[s("code",[a._v("执行过程")])]),a._v(" "),s("ul",[s("li",[a._v("先调用Number()函数")]),a._v(" "),s("li",[a._v("然后将Number()返回结果与NaN进行比较")])]),a._v(" "),s("h3",{attrs:{id:"自增-自减运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自增-自减运算符"}},[a._v("#")]),a._v(" 自增/自减运算符")]),a._v(" "),s("p",[s("code",[a._v("执行过程")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("先调用Number(参数)函数；")])]),a._v(" "),s("li",[s("p",[a._v("然后将Number(参数)的返回结果进行 加 1 操作。")])])]),a._v(" "),s("h3",{attrs:{id:"正号-负号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正号-负号"}},[a._v("#")]),a._v(" 正号/负号")]),a._v(" "),s("p",[s("code",[a._v("执行过程")])]),a._v(" "),s("blockquote",[s("p",[a._v("注意，这里说的是正号/负号，不是加号/减号。")])]),a._v(" "),s("p",[a._v("任何值做"),s("code",[a._v("+a")]),a._v(" "),s("code",[a._v("-a")]),a._v(" 运算时，运算结果都会自动转换为 Number 类型。 内部调用的是 Number() 函数。")]),a._v(" "),s("h3",{attrs:{id:"加号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加号"}},[a._v("#")]),a._v(" 加号")]),a._v(" "),s("ul",[s("li",[a._v("字符串 + 数字\n"),s("ul",[s("li",[a._v("当加号的两边，只要有一个是字符串的时候，就会调用 String() 函数将数字转为字符串，然后再计算。导致最终的运算结果是字符串")])])]),a._v(" "),s("li",[a._v("Boolean + 数字\n"),s("ul",[s("li",[a._v("Boolean 型和数字型相加时， true 按 1 来算 ，false 按 0 来算。这里其实是先调 Number() 函数，将 Boolean 类型转换为 Number类型，然后再和 数字相加")])])]),a._v(" "),s("li",[a._v("null + 数字\n"),s("ul",[s("li",[a._v("等价于：0 + 数字")])])]),a._v(" "),s("li",[a._v("undefined + 数字\n"),s("ul",[s("li",[a._v("计算结果：NaN")])])])]),a._v(" "),s("h3",{attrs:{id:"运算符：-、-、"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符：-、-、"}},[a._v("#")]),a._v(" 运算符：-、*、/")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("任何非 Number 类型的值做-、*、/运算时，会将这些值转换为Number然后再运算(内部调用的是 Number() 函数），运算结果是 Number 类型。（注：任何值 + 字符串是特例，运算结果是字符串）")])]),a._v(" "),s("li",[s("p",[a._v("任何的值和字符串做加法运算，都会先转换为字符串，然后再做拼串操作")])]),a._v(" "),s("li",[s("p",[a._v("任何值和NaN做运算的结果都是NaN")])])]),a._v(" "),s("hr")])}),[],!1,null,null,null);t.default=v.exports}}]);